   1 (defn naive-primes
   2    "Implementation of lazy but naive sieve algorithms"
   3    []
   4   (letfn [
   5           (next-prime [x xs] 
   6              (if (some #(zero? (rem x %))
   7                     (take-while #(<= (* % %) x) xs))
   8              (recur (+ x 2) xs)
   9              (cons x (lazy-seq (next-prime (+ x 2) (conj xs x))))))]
  10    (cons 2 (lazy-seq (next-prime 3 [])))))
